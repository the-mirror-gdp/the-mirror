class_name CreatorUI
extends Control


signal edit_mode_changed(new_mode: int)
signal toggle_main_menu_open(show_space_settings: bool)
signal toggle_teams_editor_open()

var ui_request_captured := false

var _current_game_mode: GameMode.Mode
var _current_edit_mode: Enums.EDIT_MODE = Enums.EDIT_MODE.Asset
var _desired_edit_mode: Enums.EDIT_MODE = Enums.EDIT_MODE.Asset
var _current_gizmo_type: Enums.GIZMO_TYPE = Enums.GIZMO_TYPE.GRAB
var _desired_gizmo_type: Enums.GIZMO_TYPE = Enums.GIZMO_TYPE.MOVE
var _mouse_in_motion := false
var _mouse_used_for_build_mode_camera_movement := false
var _main_menu_open_allow_time_msec: int = 0
var _drag_detector: Control = null

@onready var object_creation = $ObjectCreation
@onready var asset_browser = $ObjectCreation/Sidebar/AssetBrowser
@onready var tool_options = $ObjectCreation/Sidebar/ToolOptions
@onready var build_toolbar: BuildToolbar = $BuildToolbar
#@onready var normal_mode_toolbar = $NormalModeToolbar
@onready var object_selection = $ObjectSelection
@onready var scene_hierarchy: SceneHierarchy = $ObjectSelection/SceneHierarchy
@onready var _grabber_tool = $ObjectSelection/Grabber
@onready var selection_helper: SelectionHelper = $ObjectSelection/SelectionHelper
@onready var _gizmo: Gizmo = $ObjectSelection/Gizmo
@onready var undo_redo = $UndoRedoSystem
@onready var terrain_tool = $TerrainTool
@onready var map_tool = $MapTool
@onready var terrain_material_browser = $TerrainMaterialBrowser
@onready var material_window = $MaterialBrowser
@onready var material_creator_window = $MaterialCreatorWindow
@onready var _script_editor_holder: Control = $ScriptEditorHolder
@onready var _script_editor: Control = $ScriptEditorHolder/ScriptEditor
@onready var _script_variable_editor = $ScriptVariableEditor
@onready var _context_menu = $ContextMenu
@onready var _ready_check_popup = $ReadyCheckPopup
@onready var _publish_space_window = $PublishSpaceWindow
@onready var _restore_space_window = $RestoreSpaceWindow
@onready var _save_version_window = $SaveVersionWindow
@onready var asset_detail_window = $AssetDetailWindow


func setup(drag_detector: Control) -> void:
	_drag_detector = drag_detector

	PlayerData.game_mode_changed.connect(_on_game_mode_changed)
	Zone.mode_changed.connect(_on_zone_mode_changed)
	_gizmo.transformation_ended.connect(clear_build_mode_camera_focus)
	_gizmo.transformation_started.connect(clear_build_mode_camera_focus)
	_grabber_tool.grabbing_started.connect(clear_build_mode_camera_focus)
	scene_hierarchy.selection_changed.connect(_on_selection_changed)
	scene_hierarchy.item_activated.connect(_on_space_object_double_clicked)

	object_creation.setup(self, _script_editor)
	#normal_mode_toolbar.setup(self)
	object_selection.setup(self, _drag_detector.selector, undo_redo, tool_options)
	undo_redo.setup(self)
	terrain_tool.setup(self)
	map_tool.setup(self)
	_context_menu.setup(self)
	_script_editor.setup(self, _script_editor_holder, _script_variable_editor)

	_set_edit_mode(Enums.EDIT_MODE.Asset)
	set_gizmo_type(Enums.GIZMO_TYPE.GRAB)


func clear() -> void:
	clear_selection()
	undo_redo.clear()


func clear_selection() -> void:
	object_selection.clear_selection()


func _unhandled_input(input_event: InputEvent) -> void:
	if not can_accept_creator_input():
		return
	if input_event is InputEventAction:
		# If this is a pure Action, not a key, don't get blocked by other things
		# checking if the key is consumed (ex: Q for movement, Q for asset inv).
		# Pure Actions may be generated by the macOS global menu for example.
		if input_event.is_action_pressed(&"asset_inventory"):
			toggle_asset_browser_visibility()
			return
	if is_game_mode(GameMode.Mode.BUILD):
		if _build_mode_camera_movement_input(input_event):
			return
	elif no_gui_is_focused() and input_event.is_action_pressed(&"asset_inventory"):
		toggle_asset_browser_visibility()
		return
	if _selection_copy_paste_input(input_event):
		return
	# Normal mode only uses Asset mode with the Grab tool (no tool selection).
	if not is_game_mode(GameMode.Mode.NORMAL):
		_tool_selection_input(input_event)


func no_gui_is_focused() -> bool:
	return get_viewport().gui_get_focus_owner() == null


func can_accept_creator_input() -> bool:
	if not visible:
		return false
	if owner.is_any_full_screen_or_modal_ui_visible():
		return false
	if Zone.is_in_play_mode():
		return false
	return true


func _selection_copy_paste_input(input_event: InputEvent) -> bool:
	if _script_editor_holder.visible and _script_editor.visible:
		if PriorityInput.is_action_pressed(&"action_deselect"):
			_main_menu_open_allow_time_msec = Time.get_ticks_msec() + 1000
			_script_editor.request_close()
		else:
			var focus_owner: Control = get_viewport().gui_get_focus_owner()
			if focus_owner != null and _script_editor_holder.is_ancestor_of(focus_owner):
				if input_event.is_action_pressed(&"action_delete"):
					_script_editor.delete_selection()
				elif input_event.is_action_pressed(&"action_duplicate"):
					_script_editor.duplicate_selection()
				elif input_event.is_action_pressed(&"action_copy"):
					_script_editor.copy_selection()
				elif input_event.is_action_pressed(&"action_paste"):
					_script_editor.paste_copied_data()
				else:
					return false
			else:
				return false
	else:
		if PriorityInput.is_action_pressed(&"action_deselect"):
			if object_creation.get_selected_asset_id() != "" or \
					not object_selection.is_selection_empty():
				_main_menu_open_allow_time_msec = Time.get_ticks_msec() + 1000
			object_selection.clear_selection()
			object_creation.set_selected_asset_id("")
		elif input_event.is_action_pressed(&"action_delete"):
			object_selection.delete_objects()
			object_selection.clear_selection()
		elif input_event.is_action_pressed(&"action_duplicate"):
			object_selection.duplicate_selected_nodes()
		elif input_event.is_action_pressed(&"action_copy"):
			object_selection.copy_selected_nodes()
		elif input_event.is_action_pressed(&"action_paste")\
				and not GameUI.instance.is_mouse_hovering_any_control():
			object_selection.paste_copied_nodes()
		else:
			return false
	return true


func _build_mode_camera_movement_input(input_event: InputEvent) -> bool:
	_mouse_in_motion = input_event is InputEventMouseMotion and input_event.relative.length() > 0
	if Input.is_action_pressed(&"build_mode_camera_movement") or GameUI.instance.is_cinematic_mode_enabled():
		if _mouse_in_motion:
			_mouse_used_for_build_mode_camera_movement = true
	else:
		_mouse_used_for_build_mode_camera_movement = false
		# Only allow camera focus with F when not moving the camera, since then
		# F means move down. However, C always focuses via player_change_camera.
		if input_event.is_action_pressed(&"build_mode_camera_focus", false, true):
			focus_build_mode_camera()
			return true
	if input_event is InputEventMouseMotion:
		return true
	if input_event.is_action_pressed(&"player_change_camera", false, true):
		focus_build_mode_camera()
		return true
	return false


func _tool_selection_input(input_event: InputEvent) -> void:
	# Figure out which tool actions are pressed (Cmd+12345 and/or QWER keys).
	var is_tool_1: bool = input_event.is_action_pressed(&"tool_1")
	var is_tool_2: bool = input_event.is_action_pressed(&"tool_2")
	var is_tool_3: bool = input_event.is_action_pressed(&"tool_3")
	var is_tool_4: bool = input_event.is_action_pressed(&"tool_4")
	var is_tool_5: bool = input_event.is_action_pressed(&"tool_5")
	if is_mouse_needed_for_ui():
		# Don't use QWER when the mouse is used for the camera.
		is_tool_1 = is_tool_1 or input_event.is_action_pressed(&"ui_only_tool_1")
		is_tool_2 = is_tool_2 or input_event.is_action_pressed(&"ui_only_tool_2")
		is_tool_3 = is_tool_3 or input_event.is_action_pressed(&"ui_only_tool_3")
		is_tool_4 = is_tool_4 or input_event.is_action_pressed(&"ui_only_tool_4")
	# Apply the requested action depending on the edit mode type.
	if is_edit_mode(Enums.EDIT_MODE.Asset) or is_edit_mode(Enums.EDIT_MODE.Map):
		if is_tool_1:
			set_gizmo_type(Enums.GIZMO_TYPE.GRAB)
		elif is_tool_2:
			set_gizmo_type(Enums.GIZMO_TYPE.MOVE)
		elif is_tool_3:
			set_gizmo_type(Enums.GIZMO_TYPE.ROTATE)
		elif is_tool_4:
			set_gizmo_type(Enums.GIZMO_TYPE.SCALE)
		elif is_tool_5:
			set_gizmo_type(Enums.GIZMO_TYPE.SCALE) # TODO: Stretch gizmo.
	if is_edit_mode(Enums.EDIT_MODE.Asset):
		if input_event.is_action_pressed(&"primitive_model_builder_toggle"):
			_set_edit_mode(Enums.EDIT_MODE.Model)
		elif input_event.is_action_pressed(&"map_mode_toggle"):
			_set_edit_mode(Enums.EDIT_MODE.Map)
		elif input_event.is_action_pressed(&"terrain_mode_toggle"):
			# _set_edit_mode(Enums.EDIT_MODE.Terrain)
			Notify.info(
				"Terrain tools unavailable",
				"The terrain tools are currently disabled.\nThanks for your patience."
			)
	elif is_edit_mode(Enums.EDIT_MODE.Terrain):
		if is_tool_1:
			terrain_tool.set_brush_mode(Enums.TERRAIN_MODE.Add)
		elif is_tool_2:
			terrain_tool.set_brush_mode(Enums.TERRAIN_MODE.Subtract)
		elif is_tool_3:
			terrain_tool.set_brush_mode(Enums.TERRAIN_MODE.Flatten)
		elif is_tool_4:
			terrain_tool.set_brush_mode(Enums.TERRAIN_MODE.Paint)
		elif input_event.is_action_pressed(&"terrain_mode_toggle"):
			_set_edit_mode(Enums.EDIT_MODE.Asset)
	elif is_edit_mode(Enums.EDIT_MODE.Model):
		if input_event.is_action_pressed(&"terrain_mode_toggle"):
			# _set_edit_mode(Enums.EDIT_MODE.Terrain)
			Notify.info(
				"Terrain tools unavailable",
				"The terrain tools are currently disabled.\nThanks for your patience."
			)
		elif input_event.is_action_pressed(&"primitive_model_builder_toggle"):
			_set_edit_mode(Enums.EDIT_MODE.Asset)
		elif input_event.is_action_pressed(&"map_mode_toggle"):
			_set_edit_mode(Enums.EDIT_MODE.Map)
	elif is_edit_mode(Enums.EDIT_MODE.Map):
		if input_event.is_action_pressed(&"primitive_model_builder_toggle"):
			_set_edit_mode(Enums.EDIT_MODE.Model)
		elif input_event.is_action_pressed(&"map_mode_toggle"):
			_set_edit_mode(Enums.EDIT_MODE.Asset)


func _set_edit_mode(new_mode: int) -> void:
	if _current_edit_mode == new_mode:
		return
	_current_edit_mode = new_mode
	edit_mode_changed.emit(_current_edit_mode)
	build_toolbar.edit_mode_changed(_current_edit_mode)
	tool_options.edit_mode_changed(_current_edit_mode)
	#normal_mode_toolbar.edit_mode_changed(_current_edit_mode)
	object_creation.edit_mode_changed(_current_edit_mode)
	_drag_detector.selector.edit_mode_changed(_current_edit_mode)
	object_selection.edit_mode_changed(_current_edit_mode)
	clear_build_mode_camera_focus()


func can_toggle_main_menu() -> bool:
	if _main_menu_open_allow_time_msec > Time.get_ticks_msec():
		return false
	if not object_creation.get_selected_asset_id().is_empty():
		return false
	if not object_selection.is_selection_empty():
		return false
	if object_selection._prim_model_tool.model_builder.is_currently_modeling():
		return false
	return true


func is_mouse_needed_for_ui() -> bool:
	if _context_menu.visible or _ready_check_popup.visible:
		return true
	if Zone.is_in_play_mode():
		return false
	if ui_request_captured:
		return false
	if _current_game_mode == GameMode.Mode.INSPECT:
		return true
	if _current_game_mode == GameMode.Mode.BUILD:
		return not _mouse_used_for_build_mode_camera_movement
	# In normal mode, the only part of CreatorUI
	# that needs the mouse is the asset browser.
	return object_creation.is_browser_expanded


func is_gizmo_type(type: Enums.GIZMO_TYPE) -> bool:
	return PlayerData.currently_selected_tool == type


func is_edit_mode(mode: Enums.EDIT_MODE) -> bool:
	return _current_edit_mode == mode


func is_game_mode(mode: GameMode.Mode) -> bool:
	return _current_game_mode == mode


func get_safe_area() -> Rect2:
	# We start by assuming the asset inventory's bottom right corner is
	# always going to be the bottom left bounds of the safe area.
	var rect = Rect2(object_creation.sidebar.get_rect().end, Vector2.ZERO)
	rect = rect.expand(object_selection.get_position())
	var bar: Rect2 = build_toolbar.get_rect()
	rect = rect.expand(bar.position + Vector2(bar.size.x * 0.5, bar.size.y))
	return rect


func show_error_in_gd_script_editor_if_open(script_instance: GDScriptInstance, line_number: int, error_text: String) -> bool:
	return _script_editor.show_error_in_gd_script_editor_if_open(script_instance, line_number, error_text)


## Opens only GDScriptInstances, focusing on a specific line.
func open_gd_script_editor(script_instance: GDScriptInstance, line_number: int, error_text: String) -> void:
	if visible:
		if script_instance.target_node is SpaceObject:
			object_selection.select_object(script_instance.target_node)
			object_selection.set_inspector_tab(1)
		_script_editor.focus_line_in_text_script(script_instance, line_number, error_text)


## Opens only VisualScriptInstances, focusing on a specific visual block.
func open_visual_script_editor(script_instance: VisualScriptInstance, script_block: ScriptBlock, error_text: String) -> void:
	if visible:
		if script_instance.target_node is SpaceObject:
			object_selection.select_object(script_instance.target_node)
			object_selection.set_inspector_tab(1)
		_script_editor.focus_block_in_visual_script(script_instance, script_block, error_text)


func search_node_tree(search_text: String) -> void:
	object_selection.search_node_tree(search_text)


func select_object(object: Node3D) -> void:
	object_selection.select_object(object)


func raycast_hit_object(hit: Node3D) -> void:
	if GameUI.instance.is_cinematic_mode_enabled() or _current_game_mode == GameMode.Mode.NORMAL:
		return
	object_selection.raycast_hit_object(hit)


func toggle_asset_browser_visibility() -> void:
	if ProjectSettings.get_setting("feature_flags/enable_build_shortcuts", true):
		object_creation.toggle_browser_expanded()


func open_context_menu(target: Object, hit_position = null) -> void:
	_context_menu.open_context_menu(target, hit_position)


func _on_zone_mode_changed(new_zone_mode: int) -> void:
	visible = new_zone_mode == Zone.ZONE_MODE.EDIT
	object_selection.zone_mode_changed(new_zone_mode)


func _on_game_mode_changed(new_mode, previous_mode) -> void:
	_current_game_mode = new_mode
	object_creation.set_game_mode(new_mode)
	object_selection.set_game_mode(new_mode)
	asset_detail_window.set_game_mode(new_mode)
	if new_mode == GameMode.Mode.NORMAL:
		# When switching Build -> Normal, request to close the script editor.
		if previous_mode == GameMode.Mode.BUILD:
			if GameplaySettings.auto_close_script_editor:
				_script_editor.request_close()
		# Normal mode only uses Asset mode with the Grab tool.
		if previous_mode != GameMode.Mode.NORMAL:
			_desired_edit_mode = _current_edit_mode
			_desired_gizmo_type = _current_gizmo_type
		set_gizmo_type(Enums.GIZMO_TYPE.GRAB) # Implies Enums.EDIT_MODE.Asset
	else:
		# Bring back previous edit mode that was active before switching.
		set_gizmo_type(_desired_gizmo_type)
		_set_edit_mode(_desired_edit_mode)


func set_gizmo_type(new_type: int, snap_step: Variant = null) -> void:
	_current_gizmo_type = new_type
	if not is_edit_mode(Enums.EDIT_MODE.Asset):
		_set_edit_mode(Enums.EDIT_MODE.Asset)
	object_selection.set_gizmo_type(new_type, snap_step)
	# The toolbars always need to know the new snap step when changing
	# the gizmo type, so that they know what to put in the SpinBox.
	if snap_step == null:
		snap_step = _gizmo.get_snap_step(new_type)
	build_toolbar.set_gizmo_type(new_type, snap_step)
	#normal_mode_toolbar.set_gizmo_type(new_type, snap_step)


func set_gizmo_relative(new_relative: bool) -> void:
	build_toolbar.set_gizmo_relative(new_relative)
	#normal_mode_toolbar.set_gizmo_relative(new_relative)
	_gizmo.is_relative = new_relative


func set_gizmo_snap_checked(is_snap_checked: bool) -> void:
	build_toolbar.set_gizmo_snap_checked(is_snap_checked)
	#normal_mode_toolbar.set_gizmo_snap_checked(is_snap_checked)
	_gizmo.is_snap_checked = is_snap_checked


func focus_build_mode_camera() -> void:
	assert(PlayerData.game_mode.get_current_mode() == GameMode.Mode.BUILD)
	if selection_helper.is_selection_empty() or _grabber_tool.is_grabbing_object:
		clear_build_mode_camera_focus()
		return
	else:
		var local_player = PlayerData.get_local_player()
		if not local_player:
			return
		selection_helper.update_position()
		local_player.camera_change_focus_point(selection_helper.global_transform.origin)


func clear_build_mode_camera_focus() -> void:
	if PlayerData.game_mode.get_current_mode() == GameMode.Mode.NORMAL:
		return
	var local_player = PlayerData.get_local_player()
	if local_player:
		local_player.camera_clear_focus_point()


func _on_selection_changed(selected_nodes: Array[Node]) -> void:
	clear_build_mode_camera_focus()


func _on_space_object_double_clicked() -> void:
	focus_build_mode_camera()


func _on_build_toolbar_snap_value_changed(amount: float) -> void:
	set_gizmo_type(PlayerData.currently_selected_tool, amount)


func _on_build_toolbar_terrain_button_pressed():
	Notify.info(
		"Terrain tools unavailable",
		"The terrain tools are currently disabled.\nThanks for your patience."
	)
	# _set_edit_mode(Enums.EDIT_MODE.Terrain)


func _on_build_toolbar_model_builder_button_pressed() -> void:
	_set_edit_mode(Enums.EDIT_MODE.Model)


func _on_build_toolbar_map_button_pressed() -> void:
	if _current_edit_mode != Enums.EDIT_MODE.Map:
		_set_edit_mode(Enums.EDIT_MODE.Map)
	else:
		_set_edit_mode(Enums.EDIT_MODE.Asset)


func _on_asset_browser_selected_asset_slot_changed(_asset_slot: AssetSlot, _request_placing: bool) -> void:
	_set_edit_mode(Enums.EDIT_MODE.Asset)


func _on_toggle_main_menu_pressed(show_space_settings: bool) -> void:
	toggle_main_menu_open.emit(show_space_settings)


func _on_toggle_teams_editor_pressed() -> void:
	toggle_teams_editor_open.emit()


func _on_drag_detector_select_asset_id(asset_id: String) -> void:
	object_creation.set_selected_asset_id(asset_id)


func _on_build_toolbar_publish_button_pressed():
	_publish_space_window.populate(Zone.space)
	_publish_space_window.show()


func _on_resized() -> void:
	if _script_editor_holder and _script_editor_holder.visible and _script_editor_holder.size.x < 500.0:
		object_creation.set_expanded(false)


func _on_build_toolbar_undo_button_toggled(button_pressed):
	$ObjectCreation/Sidebar/UndoList.visible = button_pressed


func _on_build_toolbar_redo_button_toggled(button_pressed):
	$ObjectCreation/Sidebar/RedoList.visible = button_pressed


func _on_build_toolbar_restore_button_pressed():
	_restore_space_window.populate(Zone.space)
	_restore_space_window.show()


func _on_build_toolbar_save_version_button_pressed():
	_save_version_window.populate(Zone.space)
	_save_version_window.show()
